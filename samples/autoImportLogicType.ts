// Generated by kea-typegen on Fri, 10 Jan 2025 11:14:06 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { A1, A2, A3, A4, A5, A7, D1, D3, D6, EventIndex, ExportedApi, R1, R6, RandomThing, S6, S7 } from './autoImportTypes'
import type { L1, L2, RandomAPI } from './autoImportLogic'
import type { KeaPlugin } from 'kea/lib/index'
import type { Dashboard, Repository } from './types'

export interface autoImportLogicType extends Logic {
    actionCreators: {
        actionA1: (
            local1: L1,
            local2: L2,
            param1: A1,
            param2: A2,
            param3: A3,
            param4: A4,
            param5: Partial<A5>,
            keaPlugin: KeaPlugin,
            stringType: string,
        ) => {
            type: 'action a1 (autoImportLogic)'
            payload: {
                keaPlugin: KeaPlugin
                local1: 'haha'
                local2: L2
                param1: A1
                param2: 'A2'
                param3: A3
                param4: A4
                param5: Partial<A5>
                stringType: string
            }
        }
        complexAction: (
            element: HTMLElement,
            timeout: NodeJS.Timeout,
        ) => {
            type: 'complex action (autoImportLogic)'
            payload: {
                element: HTMLElement
                timeout: Timeout
            }
        }
        combinedA6Action: (filter: A5) => {
            type: 'combined a6 action (autoImportLogic)'
            payload: {
                a6: Partial<Record<string, A7>>
                bla: string
            }
        }
        miscActionWithType: (randomThing: ExportedApi.RandomThing) => {
            type: 'misc action with type (autoImportLogic)'
            payload: {
                randomThing: ExportedApi.RandomThing
            }
        }
        miscActionWithTypeConstants: () => {
            type: 'misc action with type constants (autoImportLogic)'
            payload: {
                color: 'blue' | 'green'
            }
        }
        miscActionWithoutType: (randomThing: ExportedApi.RandomThing) => {
            type: 'misc action without type (autoImportLogic)'
            payload: {
                randomThing: RandomThing
            }
        }
        miscInterfacedAction: (randomApi: RandomAPI) => {
            type: 'misc interfaced action (autoImportLogic)'
            payload: {
                randomApi: RandomAPI
            }
        }
        setRepositories: (repositories: Repository[]) => {
            type: 'set repositories (autoImportLogic)'
            payload: {
                repositories: Repository[]
            }
        }
    }
    actionKeys: {
        'action a1 (autoImportLogic)': 'actionA1'
        'complex action (autoImportLogic)': 'complexAction'
        'combined a6 action (autoImportLogic)': 'combinedA6Action'
        'misc action with type (autoImportLogic)': 'miscActionWithType'
        'misc action with type constants (autoImportLogic)': 'miscActionWithTypeConstants'
        'misc action without type (autoImportLogic)': 'miscActionWithoutType'
        'misc interfaced action (autoImportLogic)': 'miscInterfacedAction'
        'set repositories (autoImportLogic)': 'setRepositories'
    }
    actionTypes: {
        actionA1: 'action a1 (autoImportLogic)'
        complexAction: 'complex action (autoImportLogic)'
        combinedA6Action: 'combined a6 action (autoImportLogic)'
        miscActionWithType: 'misc action with type (autoImportLogic)'
        miscActionWithTypeConstants: 'misc action with type constants (autoImportLogic)'
        miscActionWithoutType: 'misc action without type (autoImportLogic)'
        miscInterfacedAction: 'misc interfaced action (autoImportLogic)'
        setRepositories: 'set repositories (autoImportLogic)'
    }
    actions: {
        actionA1: (
            local1: L1,
            local2: L2,
            param1: A1,
            param2: A2,
            param3: A3,
            param4: A4,
            param5: Partial<A5>,
            keaPlugin: KeaPlugin,
            stringType: string,
        ) => void
        complexAction: (element: HTMLElement, timeout: NodeJS.Timeout) => void
        combinedA6Action: (filter: A5) => void
        miscActionWithType: (randomThing: ExportedApi.RandomThing) => void
        miscActionWithTypeConstants: () => void
        miscActionWithoutType: (randomThing: ExportedApi.RandomThing) => void
        miscInterfacedAction: (randomApi: RandomAPI) => void
        setRepositories: (repositories: Repository[]) => void
    }
    asyncActions: {
        actionA1: (
            local1: L1,
            local2: L2,
            param1: A1,
            param2: A2,
            param3: A3,
            param4: A4,
            param5: Partial<A5>,
            keaPlugin: KeaPlugin,
            stringType: string,
        ) => Promise<any>
        complexAction: (element: HTMLElement, timeout: NodeJS.Timeout) => Promise<any>
        combinedA6Action: (filter: A5) => Promise<any>
        miscActionWithType: (randomThing: ExportedApi.RandomThing) => Promise<any>
        miscActionWithTypeConstants: () => Promise<any>
        miscActionWithoutType: (randomThing: ExportedApi.RandomThing) => Promise<any>
        miscInterfacedAction: (randomApi: RandomAPI) => Promise<any>
        setRepositories: (repositories: Repository[]) => Promise<any>
    }
    defaults: {
        bla: D1
        asd: D6
        notimported: Bla
        rbla: R1
        rasd: R6
        then: ExportedApi.RandomThing | null
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['autoImportLogic']
    pathString: 'autoImportLogic'
    props: {
        asd: D3
    }
    reducer: (
        state: any,
        action: any,
        fullState: any,
    ) => {
        bla: D1
        asd: D6
        notimported: Bla
        rbla: R1
        rasd: R6
        then: ExportedApi.RandomThing | null
    }
    reducers: {
        bla: (state: D1, action: any, fullState: any) => D1
        asd: (state: D6, action: any, fullState: any) => D6
        notimported: (state: Bla, action: any, fullState: any) => Bla
        rbla: (state: R1, action: any, fullState: any) => R1
        rasd: (state: R6, action: any, fullState: any) => R6
        then: (state: ExportedApi.RandomThing | null, action: any, fullState: any) => ExportedApi.RandomThing | null
    }
    selector: (state: any) => {
        bla: D1
        asd: D6
        notimported: Bla
        rbla: R1
        rasd: R6
        then: ExportedApi.RandomThing | null
    }
    selectors: {
        bla: (state: any, props?: any) => D1
        asd: (state: any, props?: any) => D6
        notimported: (state: any, props?: any) => Bla
        rbla: (state: any, props?: any) => R1
        rasd: (state: any, props?: any) => R6
        then: (state: any, props?: any) => ExportedApi.RandomThing | null
        dashboard: (state: any, props?: any) => Dashboard | null
        sbla: (state: any, props?: any) => Partial<Record<string, S7>>
        eventIndex: (state: any, props?: any) => EventIndex
        randomDetectedReturn: (state: any, props?: any) => RandomThing
        randomSpecifiedReturn: (state: any, props?: any) => ExportedApi.RandomThing
        randomInterfacedReturn: (state: any, props?: any) => RandomAPI
        typedStringReturn: (state: any, props?: any) => 'blue' | 'green' | null
    }
    sharedListeners: {}
    values: {
        bla: D1
        asd: D6
        notimported: Bla
        rbla: R1
        rasd: R6
        then: ExportedApi.RandomThing | null
        dashboard: Dashboard | null
        sbla: Partial<Record<string, S7>>
        eventIndex: EventIndex
        randomDetectedReturn: RandomThing
        randomSpecifiedReturn: ExportedApi.RandomThing
        randomInterfacedReturn: RandomAPI
        typedStringReturn: 'blue' | 'green' | null
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        sbla: (arg: S6) => Partial<Record<string, S7>>
    }
}
