// Generated by kea-typegen on Sun, 30 May 2021 20:41:41 GMT. DO NOT EDIT THIS FILE MANUALLY.

import { Logic } from 'kea'

export interface complexLogicType<ActionType, ActionForm, FormInstance, AntdFieldData, DashboardItemType>
    extends Logic {
    actionCreators: {
        setForm: (
            form: FormInstance,
        ) => {
            type: 'set form (complexLogic)'
            payload: {
                form: FormInstance
            }
        }
        selectAction: (
            id: string | null,
        ) => {
            type: 'select action (complexLogic)'
            payload: {
                id: string
            }
        }
        newAction: (
            element?: HTMLElement,
        ) => {
            type: 'new action (complexLogic)'
            payload: {
                element: HTMLElement
            }
        }
        inspectForElementWithIndex: (
            index: number | null,
        ) => {
            type: 'inspect for element with index (complexLogic)'
            payload: {
                index: number
            }
        }
        inspectElementSelected: (
            element: HTMLElement,
            index: number | null,
        ) => {
            type: 'inspect element selected (complexLogic)'
            payload: {
                element: HTMLElement
                index: number
            }
        }
        setEditingFields: (
            editingFields: AntdFieldData[],
        ) => {
            type: 'set editing fields (complexLogic)'
            payload: {
                editingFields: AntdFieldData[]
            }
        }
        incrementCounter: () => {
            type: 'increment counter (complexLogic)'
            payload: {
                value: boolean
            }
        }
        saveAction: (
            formValues: ActionForm,
        ) => {
            type: 'save action (complexLogic)'
            payload: {
                formValues: ActionForm
            }
        }
        deleteAction: () => {
            type: 'delete action (complexLogic)'
            payload: {
                value: boolean
            }
        }
        showButtonActions: () => {
            type: 'show button actions (complexLogic)'
            payload: {
                value: boolean
            }
        }
        hideButtonActions: () => {
            type: 'hide button actions (complexLogic)'
            payload: {
                value: boolean
            }
        }
        setShowActionsTooltip: (
            showActionsTooltip: boolean,
        ) => {
            type: 'set show actions tooltip (complexLogic)'
            payload: {
                showActionsTooltip: boolean
            }
        }
        updateDashboardInsight: (
            id: number,
            payload: DashboardItemType,
        ) => {
            type: 'update dashboard insight (complexLogic)'
            payload: {
                key1: string
                key2: string
                key3: string
                key4: string
                key5: string
                key6: string
                key7: string
                key8: string
                key9: string
                key10: string
                key11: string
                key12: string
                key13: string
                key14: string
                key15: string
                key16: string
                key17: string
                key18: string
                key19: string
                id: number
            }
        }
    }
    actionKeys: {
        'set form (complexLogic)': 'setForm'
        'select action (complexLogic)': 'selectAction'
        'new action (complexLogic)': 'newAction'
        'inspect for element with index (complexLogic)': 'inspectForElementWithIndex'
        'inspect element selected (complexLogic)': 'inspectElementSelected'
        'set editing fields (complexLogic)': 'setEditingFields'
        'increment counter (complexLogic)': 'incrementCounter'
        'save action (complexLogic)': 'saveAction'
        'delete action (complexLogic)': 'deleteAction'
        'show button actions (complexLogic)': 'showButtonActions'
        'hide button actions (complexLogic)': 'hideButtonActions'
        'set show actions tooltip (complexLogic)': 'setShowActionsTooltip'
        'update dashboard insight (complexLogic)': 'updateDashboardInsight'
    }
    actionTypes: {
        setForm: 'set form (complexLogic)'
        selectAction: 'select action (complexLogic)'
        newAction: 'new action (complexLogic)'
        inspectForElementWithIndex: 'inspect for element with index (complexLogic)'
        inspectElementSelected: 'inspect element selected (complexLogic)'
        setEditingFields: 'set editing fields (complexLogic)'
        incrementCounter: 'increment counter (complexLogic)'
        saveAction: 'save action (complexLogic)'
        deleteAction: 'delete action (complexLogic)'
        showButtonActions: 'show button actions (complexLogic)'
        hideButtonActions: 'hide button actions (complexLogic)'
        setShowActionsTooltip: 'set show actions tooltip (complexLogic)'
        updateDashboardInsight: 'update dashboard insight (complexLogic)'
    }
    actions: {
        setForm: (form: FormInstance) => void
        selectAction: (id: string | null) => void
        newAction: (element?: HTMLElement) => void
        inspectForElementWithIndex: (index: number | null) => void
        inspectElementSelected: (element: HTMLElement, index: number | null) => void
        setEditingFields: (editingFields: AntdFieldData[]) => void
        incrementCounter: () => void
        saveAction: (formValues: ActionForm) => void
        deleteAction: () => void
        showButtonActions: () => void
        hideButtonActions: () => void
        setShowActionsTooltip: (showActionsTooltip: boolean) => void
        updateDashboardInsight: (id: number, payload: DashboardItemType) => void
    }
    constants: {}
    defaults: {
        buttonActionsVisible: boolean
        selectedActionId: number | 'new' | null
        newActionForElement: HTMLElement | null
        inspectingElement: number | null
        editingFields: AntdFieldData[] | null
        form: FormInstance | null
        counter: number
        showActionsTooltip: boolean
    }
    events: {}
    key: undefined
    listeners: {
        hideButtonActions: ((
            action: {
                type: 'hide button actions (complexLogic)'
                payload: {
                    value: boolean
                }
            },
            previousState: any,
        ) => void | Promise<void>)[]
        setShowActionsTooltip: ((
            action: {
                type: 'set show actions tooltip (complexLogic)'
                payload: {
                    showActionsTooltip: boolean
                }
            },
            previousState: any,
        ) => void | Promise<void>)[]
    }
    path: ['complexLogic']
    pathString: 'complexLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: () => any,
        fullState: any,
    ) => {
        buttonActionsVisible: boolean
        selectedActionId: number | 'new' | null
        newActionForElement: HTMLElement | null
        inspectingElement: number | null
        editingFields: AntdFieldData[] | null
        form: FormInstance | null
        counter: number
        showActionsTooltip: boolean
    }
    reducerOptions: {}
    reducers: {
        buttonActionsVisible: (state: boolean, action: any, fullState: any) => boolean
        selectedActionId: (state: number | 'new' | null, action: any, fullState: any) => number | 'new' | null
        newActionForElement: (state: HTMLElement | null, action: any, fullState: any) => HTMLElement | null
        inspectingElement: (state: number | null, action: any, fullState: any) => number | null
        editingFields: (state: AntdFieldData[] | null, action: any, fullState: any) => AntdFieldData[] | null
        form: (state: FormInstance | null, action: any, fullState: any) => FormInstance | null
        counter: (state: number, action: any, fullState: any) => number
        showActionsTooltip: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (
        state: any,
    ) => {
        buttonActionsVisible: boolean
        selectedActionId: number | 'new' | null
        newActionForElement: HTMLElement | null
        inspectingElement: number | null
        editingFields: AntdFieldData[] | null
        form: FormInstance | null
        counter: number
        showActionsTooltip: boolean
    }
    selectors: {
        buttonActionsVisible: (state: any, props?: any) => boolean
        selectedActionId: (state: any, props?: any) => number | 'new' | null
        newActionForElement: (state: any, props?: any) => HTMLElement | null
        inspectingElement: (state: any, props?: any) => number | null
        editingFields: (state: any, props?: any) => AntdFieldData[] | null
        form: (state: any, props?: any) => FormInstance | null
        counter: (state: any, props?: any) => number
        showActionsTooltip: (state: any, props?: any) => boolean
        selectedAction: (state: any, props?: any) => ActionType
        initialValuesForForm: (state: any, props?: any) => ActionForm
        selectedEditedAction: (state: any, props?: any) => ActionForm
    }
    sharedListeners: {}
    values: {
        buttonActionsVisible: boolean
        selectedActionId: number | 'new' | null
        newActionForElement: HTMLElement | null
        inspectingElement: number | null
        editingFields: AntdFieldData[] | null
        form: FormInstance | null
        counter: number
        showActionsTooltip: boolean
        selectedAction: ActionType
        initialValuesForForm: ActionForm
        selectedEditedAction: ActionForm
    }
    _isKea: true
    _isKeaWithKey: false
    __keaTypeGenInternalSelectorTypes: {
        selectedAction: (selectedActionId: number | 'new', newActionForElement: HTMLElement) => ActionType
        initialValuesForForm: (selectedAction: ActionType) => ActionForm
        selectedEditedAction: (
            selectedAction: ActionType,
            initialValuesForForm: ActionForm,
            form: FormInstance,
            editingFields: AntdFieldData[],
            inspectingElement: number,
            counter: number,
        ) => ActionForm
    }
}
