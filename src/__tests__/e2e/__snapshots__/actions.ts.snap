// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`actions - as a function returning a object 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        \\"update name (logic)\\": \\"updateName\\";
        \\"update other name (logic)\\": \\"updateOtherName\\";
    };
    actionTypes: {
        updateName: \\"update name (logic)\\";
        updateOtherName: \\"update other name (logic)\\";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        \\"logic\\"
    ];
    pathString: \\"logic\\";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`actions - as an object 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        \\"update name (logic)\\": \\"updateName\\";
        \\"update other name (logic)\\": \\"updateOtherName\\";
    };
    actionTypes: {
        updateName: \\"update name (logic)\\";
        updateOtherName: \\"update other name (logic)\\";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        \\"logic\\"
    ];
    pathString: \\"logic\\";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`actions - with a function 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: \\"update other name (logic)\\";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        \\"update name (logic)\\": \\"updateName\\";
        \\"update other name (logic)\\": \\"updateOtherName\\";
    };
    actionTypes: {
        updateName: \\"update name (logic)\\";
        updateOtherName: \\"update other name (logic)\\";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        \\"logic\\"
    ];
    pathString: \\"logic\\";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`actions - with random values instead of functions 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name?: string) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: string;
            };
        });
        withDefaultValue: (name?: any) => ({
            type: \\"with default value (logic)\\";
            payload: {
                name: string;
            };
        });
        withDefaultValueAndType: (name?: string) => ({
            type: \\"with default value and type (logic)\\";
            payload: {
                name: string;
            };
        });
        withTrue: () => ({
            type: \\"with true (logic)\\";
            payload: {
                value: true;
            };
        });
    };
    actionKeys: {
        \\"update name (logic)\\": \\"updateName\\";
        \\"with default value (logic)\\": \\"withDefaultValue\\";
        \\"with default value and type (logic)\\": \\"withDefaultValueAndType\\";
        \\"with true (logic)\\": \\"withTrue\\";
    };
    actionTypes: {
        updateName: \\"update name (logic)\\";
        withDefaultValue: \\"with default value (logic)\\";
        withDefaultValueAndType: \\"with default value and type (logic)\\";
        withTrue: \\"with true (logic)\\";
    };
    actions: {
        updateName: (name?: string) => void;
        withDefaultValue: (name?: any) => void;
        withDefaultValueAndType: (name?: string) => void;
        withTrue: () => void;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        \\"logic\\"
    ];
    pathString: \\"logic\\";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`actions - with generic 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: <T extends string>(name?: T) => ({
            type: \\"update name (logic)\\";
            payload: {
                name: T;
            };
        });
    };
    actionKeys: {
        \\"update name (logic)\\": \\"updateName\\";
    };
    actionTypes: {
        updateName: \\"update name (logic)\\";
    };
    actions: {
        updateName: <T extends string>(name?: T) => void;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        \\"logic\\"
    ];
    pathString: \\"logic\\";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;
