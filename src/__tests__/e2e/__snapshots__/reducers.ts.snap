// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`reducers - as a function returning a object 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: "update name (logic)";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: "update other name (logic)";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
        "update other name (logic)": "updateOtherName";
    };
    actionTypes: {
        updateName: "update name (logic)";
        updateOtherName: "update other name (logic)";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    asyncActions: {
        updateName: (name: string) => Promise<any>;
        updateOtherName: (otherName: string) => Promise<any>;
    };
    defaults: {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    reducers: {
        name: (state: string, action: any, fullState: any) => string;
        otherNameNoDefault: (state: any, action: any, fullState: any) => any;
        yetAnotherNameWithNullDefault: (state: string | null, action: any, fullState: any) => string | null;
    };
    selector: (state: any) => {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    selectors: {
        name: (state: any, props?: any) => string;
        otherNameNoDefault: (state: any, props?: any) => any;
        yetAnotherNameWithNullDefault: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`reducers - as an object 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: "update name (logic)";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: "update other name (logic)";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
        "update other name (logic)": "updateOtherName";
    };
    actionTypes: {
        updateName: "update name (logic)";
        updateOtherName: "update other name (logic)";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    asyncActions: {
        updateName: (name: string) => Promise<any>;
        updateOtherName: (otherName: string) => Promise<any>;
    };
    defaults: {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    reducers: {
        name: (state: string, action: any, fullState: any) => string;
        otherNameNoDefault: (state: any, action: any, fullState: any) => any;
        yetAnotherNameWithNullDefault: (state: string | null, action: any, fullState: any) => string | null;
    };
    selector: (state: any) => {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    selectors: {
        name: (state: any, props?: any) => string;
        otherNameNoDefault: (state: any, props?: any) => any;
        yetAnotherNameWithNullDefault: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`reducers - with a function 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: "update name (logic)";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: "update other name (logic)";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
        "update other name (logic)": "updateOtherName";
    };
    actionTypes: {
        updateName: "update name (logic)";
        updateOtherName: "update other name (logic)";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    asyncActions: {
        updateName: (name: string) => Promise<any>;
        updateOtherName: (otherName: string) => Promise<any>;
    };
    defaults: {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    reducers: {
        name: (state: string, action: any, fullState: any) => string;
        otherNameNoDefault: (state: any, action: any, fullState: any) => any;
        yetAnotherNameWithNullDefault: (state: string | null, action: any, fullState: any) => string | null;
    };
    selector: (state: any) => {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    selectors: {
        name: (state: any, props?: any) => string;
        otherNameNoDefault: (state: any, props?: any) => any;
        yetAnotherNameWithNullDefault: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        name: string;
        otherNameNoDefault: any;
        yetAnotherNameWithNullDefault: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`reducers - with bool default 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: () => ({
            type: "update name (logic)";
            payload: {
                value: true;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
    };
    actionTypes: {
        updateName: "update name (logic)";
    };
    actions: {
        updateName: () => void;
    };
    asyncActions: {
        updateName: () => Promise<any>;
    };
    defaults: {
        name: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        name: boolean;
    };
    reducers: {
        name: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        name: boolean;
    };
    selectors: {
        name: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        name: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;
