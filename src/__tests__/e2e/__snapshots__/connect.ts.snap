// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`connect actions and rename 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        firstAction: (name: string) => ({
            type: "first action (logic)";
            payload: {
                name: string;
            };
        });
        secondAction: (otherName: string) => ({
            type: "second action (logic)";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        "first action (logic)": "firstAction";
        "second action (logic)": "secondAction";
    };
    actionTypes: {
        firstAction: "first action (logic)";
        secondAction: "second action (logic)";
    };
    actions: {
        firstAction: (name: string) => void;
        secondAction: (otherName: string) => void;
    };
    asyncActions: {
        firstAction: (name: string) => Promise<any>;
        secondAction: (otherName: string) => Promise<any>;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`connect actions from another logic 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: "update name (logic)";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: "update other name (logic)";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
        "update other name (logic)": "updateOtherName";
    };
    actionTypes: {
        updateName: "update name (logic)";
        updateOtherName: "update other name (logic)";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    asyncActions: {
        updateName: (name: string) => Promise<any>;
        updateOtherName: (otherName: string) => Promise<any>;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`connect actions from multiple other logics 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: "update name (logic)";
            payload: {
                name: string;
            };
        });
        updateOtherName: (otherName: string) => ({
            type: "update other name (logic)";
            payload: {
                otherName: string;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
        "update other name (logic)": "updateOtherName";
    };
    actionTypes: {
        updateName: "update name (logic)";
        updateOtherName: "update other name (logic)";
    };
    actions: {
        updateName: (name: string) => void;
        updateOtherName: (otherName: string) => void;
    };
    asyncActions: {
        updateName: (name: string) => Promise<any>;
        updateOtherName: (otherName: string) => Promise<any>;
    };
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {};
    sharedListeners: {};
    values: {};
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`connect props from another logic 1`] = `
"export interface logicType extends Logic {
    actionCreators: {};
    actionKeys: {};
    actionTypes: {};
    actions: {};
    asyncActions: {};
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {
        name: (state: any, props?: any) => string;
        yetAnotherNameWithNullDefault: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        name: string;
        yetAnotherNameWithNullDefault: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`connect values and rename 1`] = `
"export interface logicType extends Logic {
    actionCreators: {};
    actionKeys: {};
    actionTypes: {};
    actions: {};
    asyncActions: {};
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {
        firstSelector: (state: any, props?: any) => string;
        secondSelector: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        firstSelector: string;
        secondSelector: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`connect values from another logic 1`] = `
"export interface logicType extends Logic {
    actionCreators: {};
    actionKeys: {};
    actionTypes: {};
    actions: {};
    asyncActions: {};
    defaults: {};
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {
        name: (state: any, props?: any) => string;
        yetAnotherNameWithNullDefault: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        name: string;
        yetAnotherNameWithNullDefault: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;
