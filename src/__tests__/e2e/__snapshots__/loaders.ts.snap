// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loaders - with a function 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: "update name (logic)";
            payload: {
                name: string;
            };
        });
        loadSessions: (query: string) => ({
            type: "load sessions (logic)";
            payload: string;
        });
        loadSessionsSuccess: (sessions: Session[], payload?: string) => ({
            type: "load sessions success (logic)";
            payload: {
                sessions: Session[];
                payload?: string;
            };
        });
        loadSessionsFailure: (error: string, errorObject?: any) => ({
            type: "load sessions failure (logic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
        "load sessions (logic)": "loadSessions";
        "load sessions success (logic)": "loadSessionsSuccess";
        "load sessions failure (logic)": "loadSessionsFailure";
    };
    actionTypes: {
        updateName: "update name (logic)";
        loadSessions: "load sessions (logic)";
        loadSessionsSuccess: "load sessions success (logic)";
        loadSessionsFailure: "load sessions failure (logic)";
    };
    actions: {
        updateName: (name: string) => void;
        loadSessions: (query: string) => void;
        loadSessionsSuccess: (sessions: Session[], payload?: string) => void;
        loadSessionsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        updateName: (name: string) => Promise<any>;
        loadSessions: (query: string) => Promise<any>;
        loadSessionsSuccess: (sessions: Session[], payload?: string) => Promise<any>;
        loadSessionsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    reducers: {
        sessions: (state: Session[], action: any, fullState: any) => Session[];
        sessionsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    selectors: {
        sessions: (state: any, props?: any) => Session[];
        sessionsLoading: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`loaders - with an array and default 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        updateName: (name: string) => ({
            type: "update name (logic)";
            payload: {
                name: string;
            };
        });
        loadSessions: (query: string) => ({
            type: "load sessions (logic)";
            payload: string;
        });
        loadSessionsSuccess: (sessions: Session[], payload?: string) => ({
            type: "load sessions success (logic)";
            payload: {
                sessions: Session[];
                payload?: string;
            };
        });
        loadSessionsFailure: (error: string, errorObject?: any) => ({
            type: "load sessions failure (logic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "update name (logic)": "updateName";
        "load sessions (logic)": "loadSessions";
        "load sessions success (logic)": "loadSessionsSuccess";
        "load sessions failure (logic)": "loadSessionsFailure";
    };
    actionTypes: {
        updateName: "update name (logic)";
        loadSessions: "load sessions (logic)";
        loadSessionsSuccess: "load sessions success (logic)";
        loadSessionsFailure: "load sessions failure (logic)";
    };
    actions: {
        updateName: (name: string) => void;
        loadSessions: (query: string) => void;
        loadSessionsSuccess: (sessions: Session[], payload?: string) => void;
        loadSessionsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        updateName: (name: string) => Promise<any>;
        loadSessions: (query: string) => Promise<any>;
        loadSessionsSuccess: (sessions: Session[], payload?: string) => Promise<any>;
        loadSessionsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    reducers: {
        sessions: (state: Session[], action: any, fullState: any) => Session[];
        sessionsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    selectors: {
        sessions: (state: any, props?: any) => Session[];
        sessionsLoading: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        sessions: Session[];
        sessionsLoading: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;

exports[`loaders - with no param 1`] = `
"export interface logicType extends Logic {
    actionCreators: {
        loadSessions: () => ({
            type: "load sessions (logic)";
            payload: any;
        });
        loadSessionsSuccess: (sessions: string[], payload?: any) => ({
            type: "load sessions success (logic)";
            payload: {
                sessions: string[];
                payload?: any;
            };
        });
        loadSessionsFailure: (error: string, errorObject?: any) => ({
            type: "load sessions failure (logic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
        loadResults: () => ({
            type: "load results (logic)";
            payload: any;
        });
        loadResultsSuccess: (sessions: string[], payload?: any) => ({
            type: "load results success (logic)";
            payload: {
                sessions: string[];
                payload?: any;
            };
        });
        loadResultsFailure: (error: string, errorObject?: any) => ({
            type: "load results failure (logic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load sessions (logic)": "loadSessions";
        "load sessions success (logic)": "loadSessionsSuccess";
        "load sessions failure (logic)": "loadSessionsFailure";
        "load results (logic)": "loadResults";
        "load results success (logic)": "loadResultsSuccess";
        "load results failure (logic)": "loadResultsFailure";
    };
    actionTypes: {
        loadSessions: "load sessions (logic)";
        loadSessionsSuccess: "load sessions success (logic)";
        loadSessionsFailure: "load sessions failure (logic)";
        loadResults: "load results (logic)";
        loadResultsSuccess: "load results success (logic)";
        loadResultsFailure: "load results failure (logic)";
    };
    actions: {
        loadSessions: () => void;
        loadSessionsSuccess: (sessions: string[], payload?: any) => void;
        loadSessionsFailure: (error: string, errorObject?: any) => void;
        loadResults: () => void;
        loadResultsSuccess: (sessions: string[], payload?: any) => void;
        loadResultsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadSessions: () => Promise<any>;
        loadSessionsSuccess: (sessions: string[], payload?: any) => Promise<any>;
        loadSessionsFailure: (error: string, errorObject?: any) => Promise<any>;
        loadResults: () => Promise<any>;
        loadResultsSuccess: (sessions: string[], payload?: any) => Promise<any>;
        loadResultsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        sessions: string[];
        sessionsLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "logic"
    ];
    pathString: "logic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        sessions: string[];
        sessionsLoading: boolean;
    };
    reducers: {
        sessions: (state: string[], action: any, fullState: any) => string[];
        sessionsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        sessions: string[];
        sessionsLoading: boolean;
    };
    selectors: {
        sessions: (state: any, props?: any) => string[];
        sessionsLoading: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        sessions: string[];
        sessionsLoading: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}"
`;
